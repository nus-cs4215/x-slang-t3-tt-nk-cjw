; // magic file that's simultaneously a racket module and a typescript module
; const contents = `
(module car-et-al '#%builtin-kernel
  (#%require compose)
  (#%require define+provide)

  (define+provide caar (compose-syntax car car))
  (define+provide cadr (compose-syntax car cdr))
  (define+provide cdar (compose-syntax cdr car))
  (define+provide cddr (compose-syntax cdr cdr))

  (define+provide caaar (compose-syntax car car car))
  (define+provide caadr (compose-syntax car car cdr))
  (define+provide cadar (compose-syntax car cdr car))
  (define+provide caddr (compose-syntax car cdr cdr))
  (define+provide cdaar (compose-syntax cdr car car))
  (define+provide cdadr (compose-syntax cdr car cdr))
  (define+provide cddar (compose-syntax cdr cdr car))
  (define+provide cdddr (compose-syntax cdr cdr cdr))

  (define+provide caaaar (compose-syntax car car car car))
  (define+provide caaadr (compose-syntax car car car cdr))
  (define+provide caadar (compose-syntax car car cdr car))
  (define+provide caaddr (compose-syntax car car cdr cdr))
  (define+provide cadaar (compose-syntax car cdr car car))
  (define+provide cadadr (compose-syntax car cdr car cdr))
  (define+provide caddar (compose-syntax car cdr cdr car))
  (define+provide cadddr (compose-syntax car cdr cdr cdr))
  (define+provide cdaaar (compose-syntax cdr car car car))
  (define+provide cdaadr (compose-syntax cdr car car cdr))
  (define+provide cdadar (compose-syntax cdr car cdr car))
  (define+provide cdaddr (compose-syntax cdr car cdr cdr))
  (define+provide cddaar (compose-syntax cdr cdr car car))
  (define+provide cddadr (compose-syntax cdr cdr car cdr))
  (define+provide cdddar (compose-syntax cdr cdr cdr car))
  (define+provide cddddr (compose-syntax cdr cdr cdr cdr))

  (define+provide caaaaar (compose-syntax car car car car car))
  (define+provide caaaadr (compose-syntax car car car car cdr))
  (define+provide caaadar (compose-syntax car car car cdr car))
  (define+provide caaaddr (compose-syntax car car car cdr cdr))
  (define+provide caadaar (compose-syntax car car cdr car car))
  (define+provide caadadr (compose-syntax car car cdr car cdr))
  (define+provide caaddar (compose-syntax car car cdr cdr car))
  (define+provide caadddr (compose-syntax car car cdr cdr cdr))
  (define+provide cadaaar (compose-syntax car cdr car car car))
  (define+provide cadaadr (compose-syntax car cdr car car cdr))
  (define+provide cadadar (compose-syntax car cdr car cdr car))
  (define+provide cadaddr (compose-syntax car cdr car cdr cdr))
  (define+provide caddaar (compose-syntax car cdr cdr car car))
  (define+provide caddadr (compose-syntax car cdr cdr car cdr))
  (define+provide cadddar (compose-syntax car cdr cdr cdr car))
  (define+provide caddddr (compose-syntax car cdr cdr cdr cdr))
  (define+provide cdaaaar (compose-syntax cdr car car car car))
  (define+provide cdaaadr (compose-syntax cdr car car car cdr))
  (define+provide cdaadar (compose-syntax cdr car car cdr car))
  (define+provide cdaaddr (compose-syntax cdr car car cdr cdr))
  (define+provide cdadaar (compose-syntax cdr car cdr car car))
  (define+provide cdadadr (compose-syntax cdr car cdr car cdr))
  (define+provide cdaddar (compose-syntax cdr car cdr cdr car))
  (define+provide cdadddr (compose-syntax cdr car cdr cdr cdr))
  (define+provide cddaaar (compose-syntax cdr cdr car car car))
  (define+provide cddaadr (compose-syntax cdr cdr car car cdr))
  (define+provide cddadar (compose-syntax cdr cdr car cdr car))
  (define+provide cddaddr (compose-syntax cdr cdr car cdr cdr))
  (define+provide cdddaar (compose-syntax cdr cdr cdr car car))
  (define+provide cdddadr (compose-syntax cdr cdr cdr car cdr))
  (define+provide cddddar (compose-syntax cdr cdr cdr cdr car))
  (define+provide cdddddr (compose-syntax cdr cdr cdr cdr cdr))

  )
; `
; exports.default = contents
; exports.contents = contents

